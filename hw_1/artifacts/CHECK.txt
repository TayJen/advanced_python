1.1 nl -b a
  1. Текстовый файл

  (venv) D:\main\university\itmo\courses\advanced_python\hw_1>python 1_1.py -f true -p test_file.txt
      1  Hello
      2  
      3  I am here
      4
      5    oh really?
      6
      7  yes really.


  2. Питоновский файл

  (venv) D:\main\university\itmo\courses\advanced_python\hw_1>python 1_1.py -f true -p 1_1.py
      1  import os
      2  import sys
      3  import argparse
      4  from typing import List
      5
      6
      7  def num_lines(lines: List[str]) -> None:
      8      for i in range(len(lines)):
      9          new_line = f"{i+1:5}  {lines[i][:-1]}"
    10          print(new_line)
    11
    12
    13  if __name__ == "__main__":
    14      parser = argparse.ArgumentParser(
    15          prog='nl -b a',
    16          description="""
    17              Программа работает как скрипт nl -b a в linux, а именно нумерует строки и выводит их
    18
    19              Аргументы:
    20              -f --from_file  Флаг, указываем если хотим нумеровать строки из файла
    21              -p --path       Путь до файла, если хотим нумеровать строки из файла
    22
    23              Использование:
    24              В случае если считываем инпут из командной строки в последней строке необходимо поставить символ Ctrl+Z
    25              Таким образом программа определит что достигнут конец инпута
    26          """
    27      )
    28      parser.add_argument("-f", "--from_file", help="Используем файл как вход или консоль", type=bool, default=False)
    29      parser.add_argument("-p", "--path", help="Путь до файла если используем файл", type=str, default=None)
    30
    31      args = parser.parse_args()
    32
    33      from_file = args.from_file
    34      if from_file:
    35          file_path = args.path
    36          if os.path.exists(file_path):
    37              with open(file_path, 'r', encoding='utf-8') as f:
    38                  lines = f.readlines()
    39          else:
    40              assert False, "File doesn't exist"
    41      else:
    42          lines = []
    43          for line in sys.stdin.readlines():
    44              lines.append(line)
    45
    46      num_lines(lines)


  3. Ввод из консоли
  (venv) D:\main\university\itmo\courses\advanced_python\hw_1>python 1_1.py
  hey
  I am here
    yes I am talking with you
  don't you know me?
      I was cycling with you yesterday
          and then we drank some beer
  oh man I must have lost my memory
  oh it's so depressing
  ^Z  
      1  hey
      2  I am here
      3    yes I am talking with you
      4  don't you know me?
      5      I was cycling with you yesterday
      6          and then we drank some beer
      7  oh man I must have lost my memory
      8  oh it's so depressing


  4. Ввод из несуществующего файла
  (venv) D:\main\university\itmo\courses\advanced_python\hw_1>python 1_1.py -f true -p hello.txt
  Traceback (most recent call last):
    File "D:\main\university\itmo\courses\advanced_python\hw_1\1_1.py", line 40, in <module>
      assert False, "File doesn't exist"
  AssertionError: File doesn't exist


1.2 tail
  1. Обычный текстовый файл

  (venv) D:\main\university\itmo\courses\advanced_python\hw_1>python 1_2.py -f true -p artifacts/test_file.txt
  Hello

  I am here

    oh really?

  yes really.

  2. Питоновский файл

  (venv) D:\main\university\itmo\courses\advanced_python\hw_1>python 1_2.py -f true -p 1_1.py
              with open(file_path, 'r', encoding='utf-8') as f:
                  lines = f.readlines()
          else:
              assert False, "File doesn't exist"
      else:
          lines = []
          for line in sys.stdin.readlines():
              lines.append(line)

      num_lines(lines)

  3. Два питоновских файла

  (venv) D:\main\university\itmo\courses\advanced_python\hw_1>python 1_2.py -f true -p 1_1.py 1_2.py
  ==> 1_1.py <==
              with open(file_path, 'r', encoding='utf-8') as f:
                  lines = f.readlines()
          else:
              assert False, "File doesn't exist"
      else:
          lines = []
          for line in sys.stdin.readlines():
              lines.append(line)

      num_lines(lines)

  ==> 1_2.py <==
          else:
              for path in paths:
                  print(f"==> {path.split('/')[-1]} <==")
                  open_file_and_print_last_lines(path)
                  print()
      else:
          lines = []
          for line in sys.stdin.readlines():
              lines.append(line)
          print_last_n_lines(lines, 17)

  4. Ввод из консоли

  (venv) D:\main\university\itmo\courses\advanced_python\hw_1>python 1_2.py
  Команда tail Linux
  Обновлено: 13 апреля 2020 Опубликовано: 13 июля, 2017 от admin , 7 комменариев, время чтения: 5 минут
  Обнаружили ошибку в тексте? Сообщите мне об этом. Выделите текст с ошибкой и нажмите Ctrl+Enter.
  Все знают о команде cat, которая используется для просмотра содержимого файлов. Но в некоторых случаях вам не нужно смотреть весь файл, иногда достаточно посмотреть только то, что находится в конце файла. Например, когда вы хотите посмотреть содержимое лог файла, то вам не нужно то, с чего он начинается, вам будет достаточно последних сообщений об ошибках.

  Для этого можно использовать команду tail, она позволяет выводить заданное количество строк с конца файла, а также выводить новые строки в интерактивном режиме. В этой статье будет рассмотрена команда tail Linux.


  Содержание статьи

  Команда tail в Linux
  Использование tail
  Выводы
  Команда tail в Linux
  Перед тем как мы будем рассматривать примеры tail linux, давайте разберем ее синтаксис и опции. А синтаксис очень прост:

  $ tail опции файл

  По умолчанию утилита выводит десять последних строк из файла, но ее поведение можно настроить с помощью опций:

  -c - выводить указанное количество байт с конца файла;
  -f - обновлять информацию по мере появления новых строк в файле;
  -n - выводить указанное количество строк из конца файла;
  --pid - используется с опцией -f, позволяет завершить работу утилиты, когда завершится указанный процесс;
  -q - не выводить имена файлов;
  --retry - повторять попытки открыть файл, если он недоступен;
  -v - выводить подробную информацию о файле;
  В качестве значения параметра -c можно использовать число с приставкой b, kB, K, MB, M, GB, G T, P, E, Z, Y. Еще есть одно замечание по поводу имен файлов. По умолчанию утилита не отслеживает изменение имен, но вы можете указать что нужно отслеживать файл по дескриптору, подробнее в примерах.

  Использование tail
  ^Z
  Команда tail в Linux
  Перед тем как мы будем рассматривать примеры tail linux, давайте разберем ее синтаксис и опции. А синтаксис очень прост:

  $ tail опции файл

  По умолчанию утилита выводит десять последних строк из файла, но ее поведение можно настроить с помощью опций:

  -c - выводить указанное количество байт с конца файла;
  -f - обновлять информацию по мере появления новых строк в файле;
  -n - выводить указанное количество строк из конца файла;
  --pid - используется с опцией -f, позволяет завершить работу утилиты, когда завершится указанный процесс;
  -q - не выводить имена файлов;
  --retry - повторять попытки открыть файл, если он недоступен;
  -v - выводить подробную информацию о файле;
  В качестве значения параметра -c можно использовать число с приставкой b, kB, K, MB, M, GB, G T, P, E, Z, Y. Еще есть одно замечание по поводу имен файлов. По умолчанию утилита не отслеживает изменение имен, но вы можете указать что нужно отслеживать файл по дескриптору, подробнее в примерах.

  Использование tail

1.3 wc
  1. Один файл
  (venv) D:\main\university\itmo\courses\advanced_python\hw_1>python 1_3.py -f true -p artifacts\fast_test_wc.txt
      3       6      29 artifacts\fast_test_wc.txt
  
  2. Несколько файлов
  (venv) D:\main\university\itmo\courses\advanced_python\hw_1>python 1_3.py -f true -p 1_1.py 1_2.py 1_3.py
     46     431    1501 1_1.py
     57     542    1906 1_2.py
     76     690    2734 1_3.py
    179    1663    6141 total

  3. Ввод из консоли
  (venv) D:\main\university\itmo\courses\advanced_python\hw_1>python 1_3.py
  (venv) D:\main\university\itmo\courses\advanced_python\hw_1>python 1_3.py
  fdaf,ff jfjjf ff";|l
  kk ee
  .
  ^Z
      3       6      29 stdin

  P.S. Тоже самое выводится в убунте при запросе wc fast_test_wc.txt
